#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, messagebox
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import threading
import queue

class WaypointGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("TurtleBot3 Waypoint Navigator")
        self.root.geometry("600x500")
        self.root.configure(bg='#f0f0f0')
        
        # ROS 2 setup
        self.ros_node = None
        self.status_queue = queue.Queue()
        self.command_pub = None
        
        # Initialize ROS in a separate thread
        self.ros_thread = threading.Thread(target=self.init_ros, daemon=True)
        self.ros_thread.start()
        
        # Selected waypoints
        self.selected_waypoints = []
        
        # Waypoint definitions
        self.waypoints = ['Station A', 'Station B', 'Station C', 'Station D', 'Docking Station', 'Home']
        
        self.setup_ui()
        self.update_status()
    
    def init_ros(self):
        """Initialize ROS 2 node"""
        try:
            rclpy.init()
            self.ros_node = Node('waypoint_gui_node')
            self.command_pub = self.ros_node.create_publisher(String, 'waypoint_command', 10)
            
            # Subscribe to status
            self.ros_node.create_subscription(String, 'waypoint_status', self.status_callback, 10)
            
            # Spin in background
            while rclpy.ok():
                rclpy.spin_once(self.ros_node, timeout_sec=0.1)
        except Exception as e:
            print(f"ROS initialization error: {e}")
    
    def status_callback(self, msg):
        """Receive status updates from waypoint manager"""
        self.status_queue.put(msg.data)
    
    def setup_ui(self):
        """Setup the GUI"""
        # Title
        title_label = tk.Label(
            self.root,
            text="TurtleBot3 Waypoint Navigator",
            font=("Arial", 18, "bold"),
            bg='#f0f0f0',
            fg='#333'
        )
        title_label.pack(pady=20)
        
        # Status frame
        status_frame = ttk.LabelFrame(self.root, text="Navigation Status", padding=10)
        status_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.status_label = tk.Label(
            status_frame,
            text="Ready",
            font=("Arial", 12),
            fg='green',
            bg='white',
            relief=tk.SUNKEN,
            height=2
        )
        self.status_label.pack(fill=tk.X)
        
        # Waypoint selection frame
        waypoint_frame = ttk.LabelFrame(self.root, text="Select Waypoints", padding=10)
        waypoint_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # Waypoint buttons
        button_frame = tk.Frame(waypoint_frame, bg='#f0f0f0')
        button_frame.pack(fill=tk.BOTH, expand=True)
        
        self.waypoint_buttons = {}
        for i, waypoint in enumerate(self.waypoints):
            btn = tk.Button(
                button_frame,
                text=waypoint,
                font=("Arial", 11),
                width=15,
                height=2,
                bg='#4CAF50',
                fg='white',
                activebackground='#45a049',
                command=lambda wp=waypoint: self.toggle_waypoint(wp)
            )
            row = i // 3
            col = i % 3
            btn.grid(row=row, column=col, padx=5, pady=5, sticky='nsew')
            self.waypoint_buttons[waypoint] = btn
        
        # Configure grid weights
        for i in range(3):
            button_frame.grid_columnconfigure(i, weight=1)
        
        # Selected waypoints display
        selected_frame = ttk.LabelFrame(self.root, text="Selected Waypoints", padding=10)
        selected_frame.pack(fill=tk.X, padx=20, pady=10)
        
        self.selected_label = tk.Label(
            selected_frame,
            text="None",
            font=("Arial", 10),
            bg='white',
            relief=tk.SUNKEN,
            height=2,
            wraplength=500,
            justify=tk.LEFT
        )
        self.selected_label.pack(fill=tk.X)
        
        # Control buttons frame
        control_frame = tk.Frame(self.root, bg='#f0f0f0')
        control_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Navigate button
        self.navigate_btn = tk.Button(
            control_frame,
            text="Navigate",
            font=("Arial", 12, "bold"),
            bg='#2196F3',
            fg='white',
            height=2,
            command=self.navigate
        )
        self.navigate_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Clear button
        clear_btn = tk.Button(
            control_frame,
            text="Clear",
            font=("Arial", 12, "bold"),
            bg='#FF9800',
            fg='white',
            height=2,
            command=self.clear_selection
        )
        clear_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Cancel button
        cancel_btn = tk.Button(
            control_frame,
            text="Cancel",
            font=("Arial", 12, "bold"),
            bg='#f44336',
            fg='white',
            height=2,
            command=self.cancel_navigation
        )
        cancel_btn.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
    
    def toggle_waypoint(self, waypoint):
        """Toggle waypoint selection"""
        if waypoint in self.selected_waypoints:
            self.selected_waypoints.remove(waypoint)
            self.waypoint_buttons[waypoint].config(bg='#4CAF50')
        else:
            self.selected_waypoints.append(waypoint)
            self.waypoint_buttons[waypoint].config(bg='#2196F3')
        
        self.update_selected_display()
    
    def update_selected_display(self):
        """Update the selected waypoints display"""
        if self.selected_waypoints:
            text = " → ".join(self.selected_waypoints) + " → Home"
        else:
            text = "None"
        self.selected_label.config(text=text)
    
    def navigate(self):
        """Send navigation command"""
        if not self.selected_waypoints:
            messagebox.showwarning("No Waypoints", "Please select at least one waypoint")
            return
        
        if len(self.selected_waypoints) == 1:
            command = f"SINGLE:{self.selected_waypoints[0]}"
        else:
            command = f"MULTI:{','.join(self.selected_waypoints)}"
        
        try:
            msg = String()
            msg.data = command
            self.command_pub.publish(msg)
            self.navigate_btn.config(state=tk.DISABLED)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to send command: {e}")
    
    def clear_selection(self):
        """Clear all selections"""
        self.selected_waypoints.clear()
        for btn in self.waypoint_buttons.values():
            btn.config(bg='#4CAF50')
        self.update_selected_display()
        self.navigate_btn.config(state=tk.NORMAL)
    
    def cancel_navigation(self):
        """Cancel current navigation"""
        try:
            msg = String()
            msg.data = "CANCEL"
            self.command_pub.publish(msg)
            self.navigate_btn.config(state=tk.NORMAL)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to cancel: {e}")
    
    def update_status(self):
        """Update status from queue"""
        try:
            while True:
                status = self.status_queue.get_nowait()
                self.update_status_label(status)
        except queue.Empty:
            pass
        
        self.root.after(100, self.update_status)
    
    def update_status_label(self, status):
        """Update status label with color coding"""
        self.status_label.config(text=status)
        
        if "Navigating" in status:
            self.status_label.config(fg='#FF9800')
            self.navigate_btn.config(state=tk.DISABLED)
        elif "Reached" in status or "Completed" in status:
            self.status_label.config(fg='green')
        elif "Failed" in status:
            self.status_label.config(fg='red')
            self.navigate_btn.config(state=tk.NORMAL)
        elif "Cancelled" in status:
            self.status_label.config(fg='#FF9800')
            self.navigate_btn.config(state=tk.NORMAL)
        elif "Ready" in status:
            self.status_label.config(fg='green')
            self.navigate_btn.config(state=tk.NORMAL)

def main():
    root = tk.Tk()
    gui = WaypointGUI(root)
    root.mainloop()

if __name__ == '__main__':
    main()
